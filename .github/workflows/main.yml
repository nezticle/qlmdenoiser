name: Build Binaries

on: [push, pull_request]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        lfs: true
    - name: Setup CMake
      uses: lukka/get-cmake@latest
    - name: Setup Ninja
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install Ninja
      run: npm install -g ninja
    - name: Download ISPC
      run: |
        curl -Lo ispc.zip https://github.com/ispc/ispc/releases/download/v1.25.3/ispc-v1.25.3-windows.zip
        unzip ispc.zip -d ispc
    - name: Set up ISPC environment variable
      run: echo "ISPC_EXECUTABLE=$(pwd)/ispc/ispc-v1.25.3-windows/bin/ispc.exe" | Out-File -FilePath $env:GITHUB_ENV -Append
    - name: Install git-lfs
      run: |
        choco install git-lfs
        git lfs install
    - name: Pull LFS objects
      run: git lfs pull
    - name: Run prepare_deps script
      run: .\prepare_deps.bat
    - name: Build with CMake
      run: cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release && nmake
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: windows-binary
        path: qlmdenoiser.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        lfs: true
    - name: Setup CMake
      uses: lukka/get-cmake@latest
    - name: Setup Ninja
      run: brew install ninja
    - name: Download ISPC
      run: |
        curl -Lo ispc.tar.gz https://github.com/ispc/ispc/releases/download/v1.25.3/ispc-v1.25.3-macOS.universal.tar.gz
        mkdir -p ispc
        tar -xzf ispc.tar.gz -C ispc
    - name: Set up ISPC environment variable
      run: echo "ISPC_EXECUTABLE=$(pwd)/ispc/ispc-v1.25.3-macOS.universal/bin/ispc" >> $GITHUB_ENV
    - name: Install git-lfs
      run: |
        brew install git-lfs
        git lfs install
    - name: Pull LFS objects
      run: git lfs pull
    - name: Run prepare_deps script
      run: ./prepare_deps.sh
    - name: Build with CMake
      run: cmake -GNinja -DCMAKE_BUILD_TYPE=Release && ninja
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: macos-binary
        path: qlmdenoiser

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        lfs: true
    - name: Setup CMake
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake
    - name: Setup Ninja
      run: sudo apt-get install -y ninja-build
    - name: Download ISPC
      run: |
        curl -Lo ispc.tar.gz https://github.com/ispc/ispc/releases/download/v1.25.3/ispc-v1.25.3-linux.tar.gz
        mkdir -p ispc
        tar -xzf ispc.tar.gz -C ispc
    - name: Set up ISPC environment variable
      run: echo "ISPC_EXECUTABLE=$(pwd)/ispc/ispc-v1.25.3-linux/bin/ispc" >> $GITHUB_ENV
    - name: Install git-lfs
      run: |
        sudo apt-get install -y git-lfs
        git lfs install
    - name: Pull LFS objects
      run: git lfs pull
    - name: Run prepare_deps script
      run: ./prepare_deps.sh
    - name: Build with CMake
      run: cmake -GNinja -DCMAKE_BUILD_TYPE=Release && ninja
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: linux-binary
        path: qlmdenoiser

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Download Windows binary
      uses: actions/download-artifact@v2
      with:
        name: windows-binary
        path: ./build/windows
    - name: Download macOS binary
      uses: actions/download-artifact@v2
      with:
        name: macos-binary
        path: ./build/macos
    - name: Download Linux binary
      uses: actions/download-artifact@v2
      with:
        name: linux-binary
        path: ./build/linux
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Windows binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/windows/qlmdenoiser.exe
        asset_name: qlmdenoiser.exe
        asset_content_type: application/octet-stream
    - name: Upload macOS binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/macos/qlmdenoiser
        asset_name: qlmdenoiser
        asset_content_type: application/octet-stream
    - name: Upload Linux binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/linux/qlmdenoiser
        asset_name: qlmdenoiser
        asset_content_type: application/octet-stream
